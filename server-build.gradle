import org.ajoberstar.grgit.*
import org.apache.commons.io.FileUtils 

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.0.0'
        classpath "commons-io:commons-io:2.4" 
    }
}

def dir = file('clone')
def root = new File("$rootProject.projectDir")

if (!dir.exists()) {
    Grgit.clone(dir: dir, uri: 'https://github.com/doctorgester/mmo')
} else {
    def grgit = Grgit.open(dir: dir)
    grgit.pull()
}

def db = file('mmo-server/database')

if (db.exists()) {
    FileUtils.copyDirectory(db, new File(root, 'database'))
}

root.listFiles().each {
    if (it.directory && it.name.startsWith('mmo')){
        it.deleteDir()
    }
}

dir.listFiles().each {
    if (it.directory && it.name.startsWith('mmo')){
        FileUtils.copyDirectory(it, new File(root, it.name))
    }
}

subprojects {
    apply plugin: 'java'
    group = 'org.gradle.sample'
    version = '1.0'

    repositories {
        mavenCentral()
        maven {
            url 'http://updates.jmonkeyengine.org/maven'
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
        }
    }

    dependencies {
        testCompile "junit:junit:4.+"

        compile 'com.google.code.gson:gson:2.3.+'
        compile 'com.google.guava:guava:18.+'
        compile 'org.slf4j:slf4j-simple:1.7.+'
        compile 'org.codehaus.groovy:groovy:2.4.+'
        compile 'org.apache.commons:commons-io:1.3.+'
        compile 'nf.fr.eraasoft:objectpool:1.1.+'
    }

}

def shared = project(':mmo-shared')

def addJme(Project project, Project shared){
    String sharedRoot = shared.projectDir.toString()

    project.dependencies.add("compile", 'com.jme3:jme3-core:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-effects:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-networking:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-plugins:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-jogg:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-terrain:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-blender:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-jbullet:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-niftygui:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-desktop:3.0.+')
    project.dependencies.add("compile", 'com.jme3:jme3-lwjgl:3.0.+')

    project.dependencies.add("compile", files(sharedRoot + '/lib/tonegod-gui.jar'))
    project.dependencies.add("compile", files(sharedRoot + '/lib/lemur.jar'))
    project.dependencies.add("compile", files(sharedRoot + '/lib/jme-testdata.jar'))
}

project(':mmo-shared'){
    dependencies {
        compile files('lib/udp-agent.jar')
    }
}

project(':mmo-admin'){
    dependencies {
        compile shared
    }
}

project(':mmo-editor'){
    dependencies {
        compile shared
        compile 'com.fifesoft:rsyntaxtextarea:2.5.+'
        addJme(project, shared)
    }
}

project(':mmo-client'){
    apply plugin: 'application'
    mainClassName = "program.main.Program"

    dependencies {
        compile shared
        addJme(project, shared)
    }

    jar {
        manifest {
            attributes 'Main-Class': 'program.main.Program'
        }
    }

    task bigJar(type: Jar) {
        sync {
            from 'res'
            into 'build/libs/res'
        }
        manifest {
            attributes 'Main-Class': 'program.main.Program'
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    task publish(type: Zip, dependsOn: bigJlsar) {
        from 'build/libs'

        doLast {
            def archive = file('build/distributions/' + project.name + '-' + project.version + '.zip')
            FileUtils.copyFile(archive, new File("/usr/local/screenserver/sites/dg-lab.com/other/" + archive.name))
        }
    }
}

project(':mmo-server'){
    apply plugin: 'application'
    mainClassName = "program.main.Program"

    jar {
        manifest {
            attributes 'Main-Class': 'program.main.Program'
        }
    }

    dependencies {
        compile shared
        compile 'org.hsqldb:hsqldb:2.3.+'
        compile 'com.j256.ormlite:ormlite-core:4.48'
        compile 'com.j256.ormlite:ormlite-jdbc:4.48'
        compile 'com.mchange:mchange-commons-java:0.2.+'
    }

    task bigJar(type: Jar) {
        manifest {
            attributes 'Main-Class': 'program.main.Program'
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    task publish(dependsOn: bigJar) {
        doLast {
            def newDb = new File('database')

            if (newDb.exists()) {
                def old = file('database')

                if (old.exists()) {
                    old.deleteDir()
                }

                FileUtils.copyDirectory(newDb, old)
            }

            ant.java(jar: 'build/libs/' + project.name + '-all-' + project.version + '.jar', fork: true, spawn: true)
        }
    }
}